"use strict";!function(){angular.module("projectMateApp",["ngAnimate","ngCookies","ngResource","ngRoute","ngSanitize","ngTouch","ui.bootstrap","ngNotificationsBar"])}(),function(){function routeConfig($routeProvider){$routeProvider.when("/",{templateUrl:"views/main.html"}).when("/about",{templateUrl:"views/about.html"}).when("/login",{templateUrl:"views/login.html",controller:"LoginCtrl",controllerAs:"LoginCtrl",access:{loginRequired:!1}}).when("/logout",{template:"",controller:"LogoutCtrl"}).when("/register",{templateUrl:"views/register.html",controller:"RegisterCtrl",controllerAs:"RegisterCtrl"}).when("/home",{templateUrl:"views/home.html",controller:"HomeCtrl",controllerAs:"HomeCtrl",access:{loginRequired:!0}}).when("/home/profile",{templateUrl:"views/profile.html",controller:"ProfileCtrl",controllerAs:"ProfileCtrl",access:{loginRequired:!0}}).when("/home/organization",{templateUrl:"views/organization.html",controller:"OrganizationCtrl",controllerAs:"OrganizationCtrl",access:{loginRequired:!0}}).when("/home/project",{templateUrl:"views/project.html",access:{loginRequired:!0}}).when("/home/project/:projectId",{templateUrl:"views/project-details.html",controller:"ProjectDetailsCtrl",controllerAs:"ProjectDetailsCtrl",access:{loginRequired:!0}}).otherwise({redirectTo:"/"})}function httpConfig($httpProvider){$httpProvider.interceptors.push("errorHttpInterceptor"),$httpProvider.defaults.withCredentials=!0}function debugConfig($logProvider){$logProvider.debugEnabled(!1)}function notifyConfig(notificationsConfigProvider){notificationsConfigProvider.setAutoHide(!0),notificationsConfigProvider.setHideDelay(3e3)}function run($rootScope,$location,$timeout,AuthService,notifications){$rootScope.$on("$routeChangeStart",function(event,next){next.access&&next.access.loginRequired&&!AuthService.isAuthenticated()&&(notifications.showError({message:"Please sign in to view "+$location.absUrl()}),event.preventDefault(),$timeout(function(){$location.path("/login")},3e3))})}angular.module("projectMateApp").config(routeConfig).config(httpConfig).config(debugConfig).config(notifyConfig).run(run)}(),function(){function AddOrganizationCtrl(Session,Organizations,notifications,$log){var vm=this;vm.loading=!1,vm.addNewOrg=function(newOrg){vm.loading=!0,Organizations.addOrg(newOrg).then(function(res){$log.debug("AddOrganizationCtrl -> addNewOrg() -> Organizations.addOrg()"),$log.debug(res);var addedOrg={orgId:res._id,orgName:res.orgName,orgRole:"admin"};Session.user.organizations.push(addedOrg),vm.resetForm(newOrg),notifications.showSuccess({message:"Your organization posted successfully"})},function(error){$log.debug("AddOrganizationCtrl -> addNewOrg() -> Organizations.addOrg() :: ERROR"),$log.debug(error),notifications.showError({message:"something wrong when adding this organization"+error.data.message})})["finally"](function(){vm.loading=!1})},vm.resetForm=function(newOrg){newOrg.orgName="",newOrg.description=""}}angular.module("projectMateApp").controller("AddOrganizationCtrl",AddOrganizationCtrl),AddOrganizationCtrl.$inject=["Session","Organizations","notifications","$log"]}(),function(){function AddProjectCtrl(Session,ProjectService,$log){var vm=this;vm.selectedIdx=null,vm.isCollapsed=!0,vm.success=null,vm.fail=null,vm.hideEditProject=!0,vm.organizations=Session.user.organizations,vm.addNewProject=function(newProject){vm.selectedOrgId?ProjectService.addProject(newProject,vm.selectedOrgId).then(function(res){$log.debug("AddProjectCtrl -> addNewProject() -> ProjectService.addProject()"),$log.debug(res),vm.isCollapsed=!0,vm.success=!0,vm.addedProject={id:res.data._id,name:res.data.projectName}},function(error){$log.debug("AddProjectCtrl -> addNewProject() -> ProjectService.addProject() :: ERROR"),$log.debug(error),vm.fail="failed to add project"}):$log.error("addProject():no org selected")},vm.setSelectedOrg=function(orgId){$log.debug("AddProjectCtrl -> setSelectedOrg() -> orgId:"),$log.debug(orgId),vm.selectedOrgId=orgId},vm.resetSelectedOrg=function(){vm.selectedOrgId=null,vm.selectedIdx=null,vm.isCollapsed=!vm.isCollapsed},vm.handleClick=function(orgId,idx){vm.selectedIdx===idx?(vm.selectedIdx=null,vm.isCollapsed=!vm.isCollapsed):null===vm.selectedIdx?(vm.selectedIdx=idx,vm.isCollapsed=!vm.isCollapsed,vm.setSelectedOrg(orgId)):(vm.selectedIdx=idx,vm.setSelectedOrg(orgId))}}angular.module("projectMateApp").controller("AddProjectCtrl",AddProjectCtrl),AddProjectCtrl.$inject=["Session","ProjectService","$log"]}(),function(){function alModalInstanceCtrl($modalInstance){var vm=this;vm.backHome=function(){$modalInstance.close("/home")},vm.logout=function(){$modalInstance.close("/logout")}}angular.module("projectMateApp").controller("alModalInstanceCtrl",alModalInstanceCtrl),alModalInstanceCtrl.$inject=["$modalInstance"]}(),function(){function HomeCtrl(){var vm=this;vm.startGuideConfig="st=>start: Start on Organization Page:>#/home/organization\ne=>end:>http://www.google.com\nop1=>operation: Managing/view organization membership:>#/home/organization\nop2=>operation: Project overview:>#/home/project\nop3=>operation: Listing projects by organization:>#/home/project\nop4=>operation: Managing tasks in project details page\nsub1=>operation: Create new organization:>#/home/organization\nsub2=>operation: Creating new projects:>#/home/project\ncond1=>condition: Already in a organization\nor No?:>#/home/organization\ncond2=>condition: Have exsiting project\nst->cond1\ncond1(yes)->op1\ncond1(no)->sub1(right)->op1\nop1->op2->cond2\ncond2(yes)->op3\ncond2(no)->sub2(right)->op3\nop3->op4"}angular.module("projectMateApp").controller("HomeCtrl",HomeCtrl),HomeCtrl.$inject=[]}(),function(){function LoginCtrl($scope,$rootScope,$location,AuthService,AUTH_EVENTS,Session,$log,$modal){var vm=this;vm.submitted=!1,vm.login=function(credentials){$scope.loginForm.$valid?AuthService.login(credentials).then(function(res){$rootScope.$broadcast(AUTH_EVENTS.loginSuccess),$log.debug("LoginCtrl -> login() success"),$log.debug(res),$location.path("/home")},function(error){$rootScope.$broadcast(AUTH_EVENTS.loginFailed),$log.debug("LoginCtrl -> login() failed"),vm.error=error.message}):vm.submitted=!0},$scope.$on("$routeChangeSuccess",function(){if(AuthService.isAuthenticated()){var modal=$modal.open({animation:!0,templateUrl:"../../views/alreadyLoggedinModal.html",controller:"alModalInstanceCtrl",controllerAs:"alModalInstanceCtrl"});modal.result.then(function(newPath){$location.path(newPath)},function(){$log.info("Already Loggedin Modal dismissed at: "+new Date),$location.path("/home")})}})}angular.module("projectMateApp").controller("LoginCtrl",LoginCtrl),LoginCtrl.$inject=["$scope","$rootScope","$location","AuthService","AUTH_EVENTS","Session","$log","$modal"]}(),function(){function LogoutCtrl($location,$rootScope,Session,AuthService,AUTH_EVENTS,$log){AuthService.logout().then(function(){$log.debug("LogoutCtrl -> logout"),Session.user=null,$rootScope.$broadcast(AUTH_EVENTS.logoutSuccess),$location.path("/")})}angular.module("projectMateApp").controller("LogoutCtrl",LogoutCtrl),LogoutCtrl.$inject=["$location","$rootScope","Session","AuthService","AUTH_EVENTS","$log"]}(),function(){function MainCtrl($scope,$location,Session,ErrorService,AUTH_EVENTS,$log){var vm=this;vm.errorService=ErrorService,vm.currentUser=Session.user,vm.navOpen=!1,vm.currentRoute=$location.path(),$scope.$on(AUTH_EVENTS.loginSuccess,function(){vm.currentUser=Session.user}),$scope.$on(AUTH_EVENTS.displaynameUpdated,function(){$log.info(AUTH_EVENTS.displaynameUpdated),vm.currentUser.displayname=Session.user.displayname}),$scope.$on(AUTH_EVENTS.logoutSuccess,function(){vm.currentUser=null,vm.currentUsername=null}),$scope.$on("$routeChangeStart",function(){vm.navOpen=!1}),$scope.$on("$routeChangeSuccess",function(event,current){vm.currentRoute=current.$$route.originalPath})}angular.module("projectMateApp").controller("MainCtrl",MainCtrl),MainCtrl.$inject=["$scope","$location","Session","ErrorService","AUTH_EVENTS","$log"]}(),function(){function ModalCtrl($modal,$log,$controller){function createAddModalInstance(templUrl,item,size){var modalInstance=$modal.open({templateUrl:templUrl,controller:"ModalInstanceCtrl",controllerAs:"ModalInstanceCtrl",size:size,resolve:{item:function(){return item}}});modalInstance.result.then(function(newNode){projectOperationCtrl.add(item,newNode)},function(){$log.info("add modal dismissed at:"+new Date)})}function createEditModalInstance(templUrl,item,size){var modalInstance=$modal.open({templateUrl:templUrl,controller:"ModalInstanceCtrl",controllerAs:"ModalInstanceCtrl",size:size,resolve:{item:function(){return item}}});modalInstance.result.then(function(updatedNode){projectOperationCtrl.update(item,updatedNode)},function(){$log.info("add modal dismissed at:"+new Date)})}var vm=this,addModalUrl="../../views/projectTree/addModalContent.html",editModalUrl="../../views/projectTree/editModalContent.html",projectOperationCtrl=$controller("ProjectOperationCtrl");vm.remove=projectOperationCtrl.remove,vm.open=function(item,size){createAddModalInstance(addModalUrl,item,size)},vm.edit=function(item,size){createEditModalInstance(editModalUrl,item,size)}}angular.module("projectMateApp").controller("ModalCtrl",ModalCtrl),ModalCtrl.$inject=["$modal","$log","$controller","$scope"]}(),function(){function ModalInstanceCtrl($modalInstance,$filter,item,$log){var vm=this;$log.debug("ModalInstanceCtrl -> item:"),$log.debug(item),vm.item=item,vm.add=function(){$modalInstance.close(vm.newNode)},vm.cancel=function(){$modalInstance.dismiss("cancel")},vm.save=function(){$modalInstance.close(vm.updatedItem)},vm.today=function(){vm.startDate=new Date},vm.today(),vm.openDatePicker=function($event){$event.preventDefault(),$event.stopPropagation(),vm.opened=!0},vm.dateOptions={formatYear:"yy",startingDay:1},vm.enddt=function(startDate,duration){if(startDate&&angular.isDate(startDate)){var newDate=new Date;return newDate.setDate(startDate.getDate()+duration),$filter("date")(newDate,"yyyy-MM-dd")}if(startDate&&!angular.isDate(startDate)){var newDate=new Date;return startDate=new Date(startDate),newDate.setDate(startDate.getDate()+duration),$filter("date")(newDate,"yyyy-MM-dd")}return""}}angular.module("projectMateApp").controller("ModalInstanceCtrl",ModalInstanceCtrl),ModalInstanceCtrl.$inject=["$modalInstance","$filter","item","$log"]}(),function(){function OrganizationCtrl($q,$http,$modal,$log,Organizations,User,Session){function createAddModalInstance(templUrl,item){var modalInstance=$modal.open({templateUrl:templUrl,controller:"RemoveMemberModalInstanceCtrl",controllerAs:"RemoveMemberModalInstanceCtrl",size:"small",resolve:{item:function(){return item}}});modalInstance.result.then(function(item){vm.removeMember(item.organ,item.username,item.idx)},function(){$log.info("add modal dismissed at:"+new Date)})}var vm=this;vm.organizations=Session.user.organizations;var removeMemberModalUrl="../../views/removeMemberModal.html";vm.addMember=function(orgId,username){Organizations.addMember(orgId,username).then(function(res){$log.debug("OrganizationCtrl -> addMember() -> Organizations.addMember()"),$log.debug(res.data),vm.addResults=username+"is added!",vm.members&&vm.organizations[idx].members.push({username:username,role:"member"})},function(reason){vm.addResults=reason.data.message})},vm.removeMember=function(organ,username,idx){Organizations.removeMember(organ.orgId,username).then(function(res){$log.debug("OrganizationCtrl -> removeMember() -> Organizations.removeMember()"),$log.debug(res.data),organ.memberTableMsg=username+" is removed!",organ.members.splice(idx,1)},function(reason){organ.memberTableMsg=reason.data.message})},vm.assignAdmin=function(organ,username,idx){Organizations.assignAdmin(organ.orgId,username).then(function(res){$log.debug("OrganizationCtrl -> assignAdmin() -> Organizations.assignAdmin()"),$log.debug(res.data),organ.memberTableMsg=username+" is now admin!",organ.members[idx].role="admin"},function(reason){organ.memberTableMsg=reason.data.message})},vm.revokeAdmin=function(organ,username,idx){Organizations.revokeAdmin(organ.orgId,username).then(function(res){$log.debug("OrganizationCtrl -> revokeAdmin() -> Organizations.removeAdmin()"),$log.debug(res.data),organ.memberTableMsg=username+" is now not admin!",organ.members[idx].role="member"},function(reason){organ.memberTableMsg=reason.data.message})},vm.getOrgMembers=function(orgId,idx){Organizations.get({id:orgId}).$promise.then(function(data){if(angular.isArray(data.admin)&&angular.isArray(data.members)){var admins=data.admin.map(function(u){return{username:u,role:"admin"}}),mems=data.members.map(function(u){return{username:u,role:"member"}});vm.organizations[idx].members=admins.concat(mems)}})},vm.openRemoveMemberModal=function(organ,username,idx){var item={vm:vm,organ:organ,username:username,idx:idx};$log.debug("remove member button clicked!!!"),createAddModalInstance(removeMemberModalUrl,item)}}angular.module("projectMateApp").controller("OrganizationCtrl",OrganizationCtrl),OrganizationCtrl.$inject=["$q","$http","$modal","$log","Organizations","User","Session"]}(),function(){function ProfileCtrl($rootScope,Session,User,$log,AUTH_EVENTS){var vm=this;vm.currentUser=Session.user,vm.updatePwdRes={update_success:!1,update_error:!1},vm.resetForm=function(form){var de={};form&&(form.$setPristine(),form.$setUntouched()),vm.userpwd=angular.copy(de)},vm.updateDisplayName=function(){return function(newName){User.updateDisplayName(Session.user._id,newName).then(function(res){$log.debug("ProfileCtrl -> updateDisplayName()"),$log.debug(res),Session.user.displayname=res.displayname,vm.currentUser.displayname=res.displayname,$rootScope.$broadcast(AUTH_EVENTS.displaynameUpdated)},function(error){$log.debug("ProfileCtrl -> updateDisplayName() :: ERROR"),$log.debug(error)})}},vm.updatePwd=function(userpwd,form){User.updatePwd(userpwd).then(function(){vm.updatePwdRes.update_error=!1,vm.updatePwdRes.update_success=!0},function(error){$log.debug("ProfileCtrl -> updatePwd()::ERROR"),$log.debug(error),vm.updatePwdRes.update_success=!1,vm.updatePwdRes.update_error=!0,vm.updatePwdRes.error=error.data.message}),vm.resetForm(form)}}angular.module("projectMateApp").controller("ProfileCtrl",ProfileCtrl),ProfileCtrl.$inject=["$rootScope","Session","User","$log","AUTH_EVENTS"]}(),function(){function ProjectDetailsCtrl($routeParams,ProjectService,loadTask,User,$log){function loadCurrentProject(){var projectId=$routeParams.projectId;vm.projectTreeData.projectId=projectId,ProjectService.get({id:projectId}).$promise.then(function(res){if($log.debug("ProjectDetailsCtrl -> loadCurrentProject() -> ProjectService.get()"),$log.debug(res),vm.currentProject={projectId:projectId,projectName:res.projectName,description:res.description,editors:res.editors,tasks:res.tasks},vm.orgId=res.parentOrg,angular.isArray(vm.currentProject.tasks)){if(0===vm.currentProject.tasks.length)return void(vm.loading=!1);angular.forEach(vm.currentProject.tasks,function(t,index){var tempObj=null;loadTask.getTaskObject(t,tempObj).then(function(res){$log.debug("ProjectDetailsCtrl -> loadCurrentProject() -> ProjectService.get() -> loadTask.getTaskObject()"),$log.debug(res),vm.projectTreeData.subTasks.push(res),index===vm.currentProject.tasks.length-1&&(vm.loading=!1)},function(error){$log.debug("ProjectDetailsCtrl -> loadCurrentProject() -> ProjectService.get() -> loadTask.getTaskObject() :: ERROR"),$log.debug(error)})})}},function(error){$log.debug("ProjectDetailsCtrl -> loadCurrentProject() :: ERROR"),$log.debug(error)})}var vm=this;vm.loading=!1,vm.projectId=$routeParams.projectId,vm.projectTreeData={projectId:null,isRoot:!0,subTasks:[]},vm.refresh=function(){$log.debug("refresh button clicked!"),vm.loading=!0,vm.projectTreeData.subTasks.length=0,loadCurrentProject()},vm.assignEditor=function(newEditor){vm.currentProject.editors.indexOf(newEditor)>=0?(vm.hasError=!0,vm.hasFeedback=!0,vm.msg=newEditor+"is already editor!"):User.query({username:newEditor}).$promise.then(function(u){$log.debug("ProjectDetailsCtrl -> assignEditor() -> User.query()"),$log.debug(u);var user=u[0]?u[0]:null;user&&user.organizations.forEach(function(o,i){o.orgId===vm.orgId?ProjectService.update({id:vm.projectId,$push:{editors:newEditor}}).$promise.then(function(res){$log.debug("ProjectDetailsCtrl -> assignEditor() -> User.get() -> ProjectService.update()"),$log.debug(res),vm.hasSuccess=!0,vm.hasFeedback=!0,vm.currentProject.editors.push(newEditor)},function(error){$log.debug("ProjectDetailsCtrl -> assignEditor() -> User.get() -> ProjectService.update() :: ERROR"),$log.debug(error),vm.hasError=!0,vm.hasFeedback=!0}):i===user.organizations.length-1&&(vm.hasError=!0,vm.hasFeedback=!0,vm.msg=newEditor+"has to be member first!")})},function(){vm.hasError=!0,vm.hasFeedback=!0,vm.msg="fail to query"+newEditor})},vm.revokeEditor=function(editor,index){ProjectService.update({id:vm.projectId,$pull:{editors:editor}}).$promise.then(function(res){$log.debug("ProjectDetailsCtrl -> revokeEditor() -> ProjectService.update()"),$log.debug(res),vm.currentProject.editors.splice(index,1)},function(){vm.msg="some error occured!"})},loadCurrentProject()}angular.module("projectMateApp").controller("ProjectDetailsCtrl",ProjectDetailsCtrl),ProjectDetailsCtrl.$inject=["$routeParams","ProjectService","loadTask","User","$log"]}(),function(){function ProjectOperationCtrl($log,ProjectService,TaskService,notifications){var vm=this;vm.projectTreeData={projectId:null,isRoot:!0,subTasks:[]},vm.remove=function(p,idx){if($log.debug("ProjectOperationCtrl -> remove(this node) :"),$log.debug(p),p.isRoot){var taskId=(p.projectId,p.subTasks[idx]._id);TaskService.remove({id:taskId}).$promise.then(function(res){$log.debug("ProjectOperationCtrl -> remove() -> TaskService.remove()"),$log.debug(res),p.subTasks.splice(idx,1),notifications.showSuccess({message:"Your task removed successfully"})},function(error){$log.debug("ProjectOperationCtrl -> remove() -> TaskService.remove() :: ERROR"),$log.debug(error),notifications.showError({message:"something wrong when removing this task"+error.data.message})})}else{var taskId=p.subTasks[idx]._id;TaskService.remove({id:taskId}).$promise.then(function(res){$log.debug("ProjectOperationCtrl -> remove() -> TaskService.remove()"),$log.debug(res),p.subTasks.splice(idx,1),notifications.showSuccess({message:"Your task removed successfully"})},function(error){$log.debug("ProjectOperationCtrl -> remove() -> TaskService.remove() :: ERROR"),$log.debug(error),notifications.showError({message:"something wrong when removing this task: "+error.data.message})})}},vm.add=function(node,newNode){$log.debug("adding this node"+node),node.isRoot?(newNode.parentProject=node.projectId,TaskService.addTask(newNode).then(function(res){$log.debug("ProjectOperationCtrl -> add() ->root-> TaskService.addTask() "),$log.debug(res);var newTask=(res.data._id,{_id:res.data._id,taskName:res.data.taskName,startDate:res.data.startDate,description:res.data.description,duration:res.data.duration,subTasks:[],createDate:res.data.created,parentProject:res.data.parentProject});node.subTasks.push(newTask),notifications.showSuccess({message:"Your task posted successfully"})},function(error){$log.debug("ProjectOperationCtrl -> add() ->root-> TaskService.addTask() :: ERROR"),$log.debug(error),notifications.showError({message:"something wrong when adding this task"+error.data.message})})):(newNode.parentTask=node._id,newNode.parentProject=node.parentProject,TaskService.addTask(newNode).then(function(res){$log.debug("ProjectOperationCtrl -> add() ->not root-> TaskService.addTask() "),$log.debug(res);var newTask=(res.data._id,{_id:res.data._id,taskName:res.data.taskName,startDate:res.data.startDate,description:res.data.description,duration:res.data.duration,subTasks:[],createDate:res.data.created,parentProject:res.data.parentProject});node.subTasks&&angular.isArray(node.subTasks)?node.subTasks.push(newTask):(node.subTasks=[],node.subTasks.push(newTask)),notifications.showSuccess({message:"Your task posted successfully"})},function(error){$log.debug("ProjectOperationCtrl -> add() ->not root-> TaskService.addTask() :: ERROR"),$log.debug(error),notifications.showError({message:"something wrong when adding this task"+error.data.message})}))},vm.update=function(node,item){node.taskName=item.taskName,node.description=item.description,node.startDate=item.startDate,node.duration=item.duration,TaskService.update({id:node._id},node).$promise.then(function(res){$log.debug("ProjectOperationCtrl -> update() ->root-> TaskService.update()"),$log.debug("task update"+res),notifications.showSuccess({message:"Your task updated successfully"})},function(error){$log.debug("ProjectOperationCtrl -> update() ->root-> TaskService.update() :: ERROR"),$log.debug(error),notifications.showError({message:"something wrong when updating this task"+error.data.message})})}}angular.module("projectMateApp").controller("ProjectOperationCtrl",ProjectOperationCtrl),ProjectOperationCtrl.$inject=["$log","ProjectService","TaskService","notifications"]}(),function(){function RegisterCtrl($scope,$location,$http,Session,ErrorService,$log,$window){var vm=this;vm.submitted=!1,vm.errorService=ErrorService,vm.register=function(user){if($scope.registerForm.$valid){user.displayname||(user.displayname=user.username);var newUser={username:user.username,password:user.password,displayname:user.displayname};$http.post("/auth/signup",newUser).success(function(data){$log.debug("RegisterCtrl -> register() -> POST()"),$log.debug(data),Session.user=data,$location.path("/home"),$window.location.reload()}).error(function(data){$log.debug("RegisterCtrl -> register() -> POST() :: ERROR"),$log.debug(data),vm.errorService.setError(data.message)})}else vm.submitted=!0}}angular.module("projectMateApp").controller("RegisterCtrl",RegisterCtrl),RegisterCtrl.$inject=["$scope","$location","$http","Session","ErrorService","$log","$window"]}(),function(){function RemoveMemberModalInstanceCtrl($modalInstance,item){var vm=this;vm.user=item.username,vm.confirm=function(){$modalInstance.close(item)},vm.cancel=function(){$modalInstance.dismiss("cancel")}}angular.module("projectMateApp").controller("RemoveMemberModalInstanceCtrl",RemoveMemberModalInstanceCtrl),RemoveMemberModalInstanceCtrl.$inject=["$modalInstance","item"]}(),function(){function ShowProjectCtrl(Organizations,ProjectService,Session,$log){var vm=this;vm.selectedOrgIdx=null,vm.isCollapsed=!0,vm.projects=null,vm.organizations=Session.user.organizations,vm.loadProjects=function(orgId){vm.projects=null,ProjectService.query({parentOrg:orgId}).$promise.then(function(res){$log.debug("ShowProjectCtrl -> loadProjects() -> ProjectService.query()"),$log.debug(res),vm.projects=res},function(error){$log.debug("ShowProjectCtrl -> loadProjects() -> ProjectService.query() :: ERROR"),$log.debug(error)})},vm.handleClick=function(orgId,idx){vm.selectedOrgIdx===idx?(vm.selectedOrgIdx=null,vm.isCollapsed=!vm.isCollapsed):null===vm.selectedOrgIdx?(vm.selectedOrgIdx=idx,vm.isCollapsed=!vm.isCollapsed,vm.loadProjects(orgId)):(vm.selectedOrgIdx=idx,vm.loadProjects(orgId))}}angular.module("projectMateApp").controller("ShowProjectCtrl",ShowProjectCtrl),ShowProjectCtrl.$inject=["Organizations","ProjectService","Session","$log"]}(),function(){function alertBar(){function linkFunc(scope,element,attrs){var alertMessageAttr=attrs.alertmessage;scope.errorMessage=null,scope.$watch(alertMessageAttr,function(newVal){scope.errorMessage=newVal})}var directive={restrict:"EA",template:'<div class="alert alert-error"ng-show="errorMessage">{{errorMessage}}</div> ',link:linkFunc};return directive}angular.module("projectMateApp").directive("alertBar",alertBar)}(),function(){function editToSave(){function linkFunc(scope){scope.view={editorEnabled:!1},scope.enableEditor=function(){scope.view.editorEnabled=!0,scope.view.editableVal=scope.val},scope.cancelEditor=function(){scope.view.editorEnabled=!1},scope.save=function(newName){var name=newName,method=scope.saveFunc();method(name),scope.cancelEditor()}}var templ='<div ng-hide="view.editorEnabled">{{val}}<button type="button" class="btn btn-default btn-sm" ng-click="enableEditor()">Edit</button></div><form ng-show="view.editorEnabled" class="form-inline"><div class="input-group"><input ng-model="view.editableVal" class="form-control"></div><button type="button" class="btn btn-default" ng-click="save(view.editableVal)">Save</button><button type="button" class="btn btn-default" ng-click="cancelEditor()">Cancel</button></form>';return{template:templ,restrict:"EA",scope:{val:"@editToSave",saveFunc:"&saveto"},link:linkFunc}}angular.module("projectMateApp").directive("editToSave",editToSave)}(),function(){function flowchartWrapper(){function compileFunc(){return function(scope,element,attrs){var flowchartConfig={"line-color":"#777777","element-color":"#777777",symbols:{start:{fill:"yellow"},end:{fill:"yellow"},operation:{fill:"#39c"},condition:{fill:"rgb(88, 196, 163)"}}},diagram=flowchart.parse(attrs.flowchartWrapper);diagram.drawSVG(attrs.id,flowchartConfig)}}var directive={restrict:"A",scope:{config:"@"},compile:compileFunc};return directive}angular.module("projectMateApp").directive("flowchartWrapper",flowchartWrapper),flowchartWrapper.$inject=[]}(),function(){function projectTree(){function controllerFunction($scope,$attrs){$scope.iconClasses={expand:"glyphicon glyphicon-folder-close",collapse:"glyphicon glyphicon-folder-open",loadingSpinner:"glyphicon glyphicon-refresh ad-spin"},$scope.attrs=$attrs,$scope.treeRoot=$scope.$eval($attrs.treeRoot)||{},$scope.toggle=function(event,item){var toggleCallback;event.stopPropagation(),toggleCallback=$scope.$eval($attrs.toggleCallback),toggleCallback?toggleCallback(item):item._ad_expanded=!item._ad_expanded};var hasChildren=$scope.$eval($attrs.hasChildren);$scope.hasChildren=function(item){var found=item[$attrs.childNode]&&item[$attrs.childNode].length>0;return hasChildren&&(found=hasChildren(item)),found},$scope.isString=function(item){return angular.isString(item)}}return{restrict:"EA",scope:!0,controller:controllerFunction,templateUrl:"../../views/projectTree/projectTree.html"}}angular.module("projectMateApp").directive("projectTree",projectTree)}(),function(){function pwdConfirm(){function linkFunc(scope,element,attrs,ctrl){ctrl.$validators.pwdConfirm=function(modelValue){return modelValue===scope.pwdToCheck?!0:!1}}return{restrict:"EA",require:"ngModel",scope:{pwdToCheck:"@pwdConfirm"},link:linkFunc}}angular.module("projectMateApp").directive("pwdConfirm",pwdConfirm)}(),function(){function stopEvent(){function linkFunc(scope,element,attrs){element.on(attrs.stopEvent,function(event){event.stopPropagation()})}var directive={restrict:"A",link:linkFunc};return directive}angular.module("projectMateApp").directive("stopEvent",stopEvent),stopEvent.$inject=["$window"]}(),angular.module("projectMateApp").filter("appFilter",function(){return function(input){return"appFilter filter: "+input}}),function(){function arrayObjectUtil($log){function rmObjFromArray(obj,objArray){for(var i=objArray.length-1;i>=0;i--)for(var key in obj)if(obj.hasOwnProperty(key)){var objToCk=objArray[i];if(objToCk[key]&&objToCk[key]===obj[key]&&(objArray.splice(i,1),0===i))return $log.debug("arrayObjectUtil -> rmObjFromArray()"),$log.debug(objArray),objArray}}return{rmObjFromArray:rmObjFromArray}}angular.module("projectMateApp").factory("arrayObjectUtil",arrayObjectUtil),arrayObjectUtil.$inject=["$log"]}(),function(){function AuthService($http,Session,$q,$log){var authService={};return authService.login=function(credentials){var deferred=$q.defer();return $http.post("/auth/signin",credentials).success(function(data){$log.debug("authService -> login()"),$log.debug(data),Session.user=data,deferred.resolve(data)}).error(function(data){$log.debug("authService -> login() :: ERROR"),$log.debug(data),deferred.reject(data)}),deferred.promise},authService.logout=function(){return $http.get("/auth/signout")},authService.isAuthenticated=function(){return!!Session.user},authService.isAuthorized=function(authorizedOrg,authorizedRoles){return angular.isArray(authorizedRoles)||(authorizedRoles=[authorizedRoles]),authService.isAuthenticated()&&authorizedOrg===Session.userOrg&&-1!==authorizedRoles.indexOf(Session.userRole)},authService}angular.module("projectMateApp").factory("AuthService",AuthService),AuthService.$inject=["$http","Session","$q","$log","User"]}(),function(){angular.module("projectMateApp").constant("AUTH_EVENTS",{loginSuccess:"auth-login-success",loginFailed:"auth-login-failed",logoutSuccess:"auth-logout-success",sessionTimeout:"auth-session-timeout",notAuthenticated:"auth-not-authenticated",notAuthorized:"auth-not-authorized",displaynameUpdated:"updateDisplayNameSuccess"}).constant("USER_ROLES",{all:"*",admin:"admin",editor:"editor",memember:"memember",organizationLevel:["admin","memember"],projectLevel:["editor"]})}(),function(){function errorHttpInterceptor($q,$rootScope,ErrorService,$log){return{response:function(response){return response},responseError:function(rejection){return $log.debug("errorHttpInterceptor:"+rejection.status),401===rejection.status?(ErrorService.setError("incorrect email or password"),$rootScope.$broadcast("event:loginRequired")):rejection.status>=400&&rejection.status<500?ErrorService.setError("unable to find what you were looking for..."):403===rejection.status&&console.log("403"),$q.reject(rejection)}}}angular.module("projectMateApp").factory("errorHttpInterceptor",errorHttpInterceptor),errorHttpInterceptor.$inject=["$q","$rootScope","ErrorService","$log"]}(),function(){function ErrorService(){return{errorMessage:"",setError:function(msg){this.errorMessage=msg},clear:function(){this.errorMessage=null}}}angular.module("projectMateApp").factory("ErrorService",ErrorService)}(),function(){function loadTask($q,TaskService,$log){function getTaskObject(taskId,tempObj,deferred){return deferred||(deferred=$q.defer()),TaskService.get({id:taskId}).$promise.then(function(res){$log.debug("loadTask -> getTaskObject() -> TaskService.get()"),$log.debug(res);var task={_id:taskId,taskName:res.taskName,startDate:res.startDate,duration:res.duration,description:res.description,subTasks:res.subTasks,parentTask:res.parentTask,parentProject:res.parentProject};if(tempObj&&tempObj.subTasks){var i=tempObj.subTasks.indexOf(taskId);tempObj.subTasks[i]=task,tempObj=tempObj.subTasks[i]}else tempObj=task;task.subTasks&&angular.isArray(task.subTasks)&&angular.forEach(task.subTasks,function(t){getTaskObject(t,tempObj,deferred)}),$log.debug("loadTask -> getTaskObject() -> TaskService.get() -> tempObj"),$log.debug(tempObj),deferred.resolve(tempObj)},function(error){$log.debug("loadTask -> getTaskObject() -> TaskService.get() ERROR:"),$log.debug(error),deferred.reject("failed to get taskid"+taskId)}),deferred.promise}return{getTaskObject:getTaskObject}}angular.module("projectMateApp").factory("loadTask",loadTask),loadTask.$inject=["$q","TaskService","$log"]}(),function(){function Organizations($resource,$q,$http){var organizations=$resource("/api/organizations/:id",{id:"@id"},{update:{method:"PUT"}});return organizations.addOrg=function(newOrg){return this.save(newOrg).$promise},organizations.addMember=function(orgId,username){return $http.put("/api/organizations/"+orgId+"/addMember/"+username,{organizationId:orgId,username:username})},organizations.removeMember=function(orgId,username){return $http.put("/api/organizations/"+orgId+"/removeMember/"+username,{organizationId:orgId,username:username})},organizations.assignAdmin=function(orgId,username){return $http.put("/api/organizations/"+orgId+"/assignAdmin/"+username,{organizationId:orgId,username:username})},organizations.revokeAdmin=function(orgId,username){return $http.put("/api/organizations/"+orgId+"/revokeAdmin/"+username,{organizationId:orgId,username:username})},organizations}angular.module("projectMateApp").factory("Organizations",Organizations),Organizations.$inject=["$resource","$q","$http"]}(),function(){function ProjectService($resource,$http){var project=$resource("/api/projects/:id",{id:"@id"},{update:{method:"PUT"}});
return project.addProject=function(newProject,orgId){return $http.post("/api/organizations/"+orgId+"/addProject",newProject)},project}angular.module("projectMateApp").factory("ProjectService",ProjectService),ProjectService.$inject=["$resource","$http"]}(),function(){function Session($window){return{user:$window.user}}angular.module("projectMateApp").factory("Session",Session),Session.$inject=["$window"]}(),function(){function TaskService($resource,$http){var task=$resource("/api/tasks/:id",{id:"@id"},{update:{method:"PUT"}});return task.addTask=function(newTask){return $http.post("/api/tasks",newTask)},task}angular.module("projectMateApp").factory("TaskService",TaskService),TaskService.$inject=["$resource","$http"]}(),function(){function User($q,$resource,$http,Session){var user=$resource("/users",null,{update:{method:"PUT"}});return user.updateDisplayName=function(uid,newName){var _this=this;return _this.update({id:Session.user._id,displayname:newName}).$promise},user.updatePwd=function(userpwd){return $http.post("/users/password",userpwd)},user}angular.module("projectMateApp").factory("User",User),User.$inject=["$q","$resource","$http","Session","arrayObjectUtil"]}();